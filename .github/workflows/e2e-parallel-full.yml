name: e2e-parallel-full

on:
  workflow_dispatch:
    inputs:
      TFDestroy:
        description: 'Destroy TF Automatically (false/true) - Default: true'
        required: true
        default: 'true'

concurrency: e2e-parallel-full

jobs:
  deploy:
    name: Run e2e test
    runs-on: ubuntu-latest

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - example_path: examples/analytics/emr-on-eks
          - example_path: examples/analytics/spark-k8s-operator
          - example_path: examples/aws-efs-csi-driver
          - example_path: examples/crossplane
          - example_path: examples/eks-cluster-with-new-vpc
          - example_path: examples/fargate-serverless
          - example_path: examples/fully-private-eks-cluster
          - example_path: examples/game-tech/agones-game-controller
          - example_path: examples/gitops/argocd
          # - example_path: examples/ingress-controllers/nginx # ignoring due to https://github.com/kubernetes-sigs/aws-load-balancer-controller/issues/1629
          - example_path: examples/ipv6-eks-cluster
          - example_path: examples/karpenter
          - example_path: examples/multi-tenancy-with-teams
          - example_path: examples/node-groups/fargate-profiles
          - example_path: examples/node-groups/managed-node-groups
          - example_path: examples/node-groups/self-managed-node-groups
          - example_path: examples/node-groups/windows-node-groups
          - example_path: examples/stateful
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup backend
        # Un-comment remote backend for use in workflow
        run: sed -i "s/# //g" ${{ matrix.example_path }}/versions.tf

      - name: Auth AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: us-west-2
          role-duration-seconds: 3600
          role-session-name: GithubActions-Session

      - name: Iamlive Setup
        run: |
          #!/bin/bash
          set -e
          set -o pipefail
          set -x
          export IAMLIVE_VERSION=v0.48.0
          wget -O iamlive.tar.gz "https://github.com/iann0036/iamlive/releases/download/${IAMLIVE_VERSION}/iamlive-${IAMLIVE_VERSION}-linux-amd64.tar.gz"
          tar -xzf iamlive.tar.gz
          chmod +x iamlive
          IAMLIVE_PID=$(./iamlive --mode proxy --bind-addr 0.0.0.0:10080 --output-file ${HOME}/policy.json --refresh-rate 1 --sort-alphabetical --force-wildcard-resource --background)
          echo "iamlive_pid=$IAMLIVE_PID" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Apply
        id: apply
        working-directory: ${{ matrix.example_path }}
        run: |
          terraform init -upgrade=true
          export HTTP_PROXY=http://127.0.0.1:10080
          export HTTPS_PROXY=http://127.0.0.1:10080
          export AWS_CA_BUNDLE="${HOME}/.iamlive/ca.pem"
          export NO_PROXY=eks.amazonaws.com,github.io,fairwinds.com,crossplane.io,github.com,agones.dev,karpenter.sh,githubusercontent.com,storage.googleapis.com
          terraform apply -target=module.vpc -no-color -input=false -auto-approve
          terraform apply -target=module.eks_blueprints -no-color -input=false -auto-approve
          terraform apply -target=module.eks_blueprints_kubernetes_addons -no-color -input=false -auto-approve
          terraform apply -no-color -input=false -auto-approve

      - name: Terraform Destroy
        if: github.event.inputs.TFDestroy == 'true' && (steps.apply.outcome == 'success' || steps.apply.outcome == 'failure')
        working-directory: ${{ matrix.example_path }}
        run: |
          terraform init -upgrade=true
          export HTTP_PROXY=http://127.0.0.1:10080
          export HTTPS_PROXY=http://127.0.0.1:10080
          export AWS_CA_BUNDLE="${HOME}/.iamlive/ca.pem"
          export NO_PROXY=eks.amazonaws.com,github.io,fairwinds.com,crossplane.io,github.com,agones.dev,karpenter.sh,githubusercontent.com,storage.googleapis.com
          terraform destroy -target=module.eks_blueprints_kubernetes_addons  -no-color -input=false -auto-approve
          terraform destroy -target=module.eks_blueprints  -no-color -input=false -auto-approve
          terraform destroy -no-color -input=false -auto-approve

      - name: Fail if TF apply failed
        if: steps.apply.outcome == 'failure'
        run: |
          echo "Terraform Apply step failed...Please check the logs of the Terraform Apply step."
          echo "Failing the job to avoid false positives."
          kill ${{ env.iamlive_pid }}
          while $(kill -0 ${{ env.iamlive_pid }} 2>/dev/null); do sleep 1; done;
          cat ${HOME}/policy.json
          exit 1

      - name: Iamlive Print & Upload Policy
        if: ${{ always() }}
        run: |
          kill ${{ env.iamlive_pid }}
          while $(kill -0 ${{ env.iamlive_pid }} 2>/dev/null); do sleep 1; done;
          cat ${HOME}/policy.json
          aws s3 cp ${HOME}/policy.json s3://terraform-eks-blueprints-iam-policies-examples/${{ matrix.example_path }}.json